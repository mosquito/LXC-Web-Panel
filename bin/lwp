#!/usr/bin/env python
# encoding: utf-8
import uuid
import errno
import signal
import os
from tornado.ioloop import IOLoop
from tornado.httpserver import HTTPServer
from tornado.log import gen_log as log
from tornado.options import options, define
from tornado.process import cpu_count
from tornado.concurrent import futures
from tornado.web import Application, StaticFileHandler, RedirectHandler

import lwp
import lwp.handlers


define('config', help="Configuration file")

group = 'HTTP server'
define("address", default="127.0.0.1", help="Listen address", group=group)
define("port", type=int, default=8080, help="Listen port", group=group)
define("debug", default=False, type=bool, help="Use for attach a debugger", group=group)
define("gzip", default=True, type=bool, help="Compress responses", group=group)
define("proxy-mode", default=True, type=bool, help="Process X-headers on requests", group=group)
define("pool-size", default=cpu_count(), type=int, help="Thread pool size", group=group)

define("secret", help="Cookie secret (default random)", default=os.getenv("SECRET", uuid.uuid4().bytes), group=group)


PROJECT_ROOT = os.path.abspath(os.path.dirname(lwp.__file__))


if __name__ == '__main__':
    options.parse_command_line()

    if options.config:
        options.parse_config_file(options.config)

    try:
        ON_STOP = []

        def on_interrupt(*args):
            io_loop = IOLoop.current()
            log.warning("Receiving interrupt signal. Application will be stopped.")
            io_loop.stop()
            exit(errno.EINTR)

        signal.signal(signal.SIGINT, on_interrupt)
        signal.signal(signal.SIGTERM, on_interrupt)
        signal.signal(signal.SIGQUIT, on_interrupt)

        app = Application(
            base_dir=PROJECT_ROOT,
            debug=options.debug,
            reload=options.debug,
            cookie_secret=options.secret,
            template_path=os.path.join(PROJECT_ROOT, 'templates'),
            default_handler_class=lwp.handlers.NotFoundError,
            gzip=options.gzip,
            handlers=(
                (r"^/favicon.ico$", RedirectHandler, {'url': '/static/favicon.ico'}),
                (r"^/static/(.*)$", StaticFileHandler, {'path': os.path.join(PROJECT_ROOT, 'static')}),
                (r"^/$", lwp.handlers.IndexHander),
                (r"^/api/host/name$", lwp.handlers.api.Hostname),
                (r"^/api/host/info$", lwp.handlers.api.HostInfo),
                (r"^/api/container$", lwp.handlers.api.Containers),
                (r"^/api/container/(?P<name>\S+)$", lwp.handlers.api.Container),
                (r"^/api/tasks/$", lwp.handlers.api.CallQueue),
            )
        )

        http_server = HTTPServer(app, xheaders=options.proxy_mode)
        http_server.listen(options.port, address=options.address)
        log.info("Starting server http://%s:%d/", options.address, options.port)
        log.info("Init thread pool with %s threads", options.pool_size)
        lwp.handlers.BaseHandler.THREAD_POOL = futures.ThreadPoolExecutor(options.pool_size)
        IOLoop.current().start()
    except Exception as e:
        log.error("Exception on main loop:")
        log.exception(e)
        exit(1)
    else:
        exit(0)
